extends layout

block content
  div(class="container mx-auto px-4 py-6")
    div(class="grid grid-cols-1 lg:grid-cols-4 gap-8")
      div(class="lg:col-span-3")
        nav(class="mb-6")
          ol(class="flex items-center space-x-2 text-sm")
            li: a(href="/" class="text-gray-500 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-200") 
              svg(class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24")
                path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6")
              span Beranda
            li: span(class="text-gray-400 dark:text-gray-500") /
            li: a(href=`/anime/${anime.slug}` class="text-gray-500 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-200")= anime.title
            li: span(class="text-gray-400 dark:text-gray-500") /
            li(class="text-primary-600 dark:text-primary-400 font-semibold") Episode #{episode.number}
        div(class="relative bg-gradient-to-br from-gray-900 to-black rounded-2xl overflow-hidden shadow-2xl mb-8 group")
          div(id="playerLoading" class="absolute inset-0 bg-black bg-opacity-75 flex items-center justify-center z-20 transition-opacity duration-300")
            div(class="text-center text-white")
              div(class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500 mx-auto mb-4")
              p(class="text-lg font-medium") Memuat Video...
              p(class="text-sm text-gray-300 mt-2") Mohon tunggu sebentar

          div(class="h-full")
            if episode.quality
              video(id="player" class="aspect-video w-full h-full" preload="metadata" poster='/images/poster.png' crossorigin="anonymous" playsinline allow="autoplay" data-plyr-config='{"autoplay": false, "muted": true}')
                if episode.video_sources
                  if Array.isArray(episode.video_sources)
                    each source in episode.video_sources
                      source(src=source.url || source type=source.type || "video/mp4")
                  else
                    each source in episode.qlist
                      source(src=episode.quality[source] type="video/mp4" size=source)
                p(class="text-white text-center p-4") Browser Anda tidak mendukung video player.

          div(class="absolute top-0 left-0 right-0 bg-gradient-to-t from-transparent via-black/50 to-black p-6 opacity-0 group-hover:opacity-100 transition-opacity duration-300")
            div(class="flex items-center justify-between text-white")
              div(class="flex items-center space-x-4")
                h2(class="text-lg font-bold")= anime.title
                span(class="text-sm bg-primary-600 px-2 py-1 rounded-full") Episode #{episode.number}

        div(class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 mb-8 border border-gray-100 dark:border-gray-700 transition-colors duration-300")
          div(class="flex items-center justify-between")
            div(class="flex items-center space-x-3")
              div(class="p-2 bg-primary-100 dark:bg-primary-900 rounded-lg transition-colors duration-300")
                svg(class="w-5 h-5 text-primary-600 dark:text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24")
                  path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7")
              div
                h3(class="font-semibold text-gray-900 dark:text-gray-100") Auto Next Episode
                p(class="text-sm text-gray-500 dark:text-gray-400") Otomatis putar episode selanjutnya
            
            label(for="autonexteps" class="relative inline-flex items-center cursor-pointer")
              input(id="autonexteps" type="checkbox" class="sr-only peer")
              div(class="relative w-11 h-6 bg-gray-200 dark:bg-gray-700 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 dark:peer-focus:ring-primary-800 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600 dark:peer-checked:bg-primary-500")

        div(class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 mb-8 border border-gray-100 dark:border-gray-700 transition-colors duration-300")
          div(class="flex items-center justify-between")
            div(class="flex-1")
              if navigation.isPrev
                a(href=`/anime/${anime.slug}/episode/${navigation.prev}` class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-600 text-gray-700 dark:text-gray-200 rounded-xl hover:from-gray-200 hover:to-gray-300 dark:hover:from-gray-600 dark:hover:to-gray-500 transition-all duration-200 transform hover:scale-105 shadow-md")
                  svg(class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24")
                    path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7")
              else
                div(class="text-gray-400 dark:text-gray-500 font-medium") First
            
            div(class="text-center px-6")
              div(class="bg-primary-50 dark:bg-primary-900 rounded-xl px-4 py-2 transition-colors duration-300")
                span(class="text-primary-600 dark:text-primary-400 font-bold text-lg") #{episode.number}
                if navigation.all_episodes && navigation.all_episodes.length > 0
                  span(class="text-primary-400 dark:text-primary-500 text-sm") / #{navigation.all_episodes.length}
            
            div(class="flex-1 text-right")
              if navigation.isNext
                a(href=`/anime/${anime.slug}/episode/${navigation.next}` class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-primary-600 to-primary-700 dark:from-primary-500 dark:to-primary-600 text-white rounded-xl hover:from-primary-700 hover:to-primary-800 dark:hover:from-primary-600 dark:hover:to-primary-700 transition-all duration-200 transform hover:scale-105 shadow-lg")
                  svg(class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24")
                    path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7")
                  
              else
                div(class="text-gray-400 dark:text-gray-500 font-medium") End

        if episode.download_links && (episode.download_links.mp4 || episode.download_links.mkv)
          div(class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg mb-8 border border-gray-100 dark:border-gray-700 overflow-hidden transition-colors duration-300")
            button(onclick="toggleDownloads()" class="w-full p-6 flex items-center justify-between text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200")
              div(class="flex items-center space-x-4")
                div(class="p-3 bg-green-100 dark:bg-green-900 rounded-xl transition-colors duration-300")
                  svg(class="w-6 h-6 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24")
                    path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z")
                div
                  h3(class="font-bold text-gray-900 dark:text-gray-100 text-lg") Download Episode
                  - var totalLinks = 0
                  if episode.download_links.mp4
                    each resolution in episode.download_links.mp4
                      - totalLinks += resolution.urls.length
                  if episode.download_links.mkv
                    each resolution in episode.download_links.mkv
                      - totalLinks += resolution.urls.length
                  p(class="text-sm text-gray-500 dark:text-gray-400")= `${totalLinks} link tersedia`
              svg(id="downloadChevron" class="w-6 h-6 text-gray-400 dark:text-gray-500 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24")
                path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7")
            
            div(id="downloadContent" class="hidden border-t border-gray-200 dark:border-gray-700")
              div(class="flex border-b border-gray-200 dark:border-gray-700")
                if episode.download_links.mp4 && episode.download_links.mp4.length > 0
                  button(onclick="switchFormat('mp4')" id="mp4Tab" class="flex-1 px-6 py-4 text-sm font-medium text-center border-b-2 border-transparent hover:text-primary-600 dark:hover:text-primary-400 hover:border-primary-300 dark:hover:border-primary-600 transition-all duration-200")
                    span(class="flex items-center justify-center space-x-2")
                      svg(class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24")
                        path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2")
                      span MP4
                if episode.download_links.mkv && episode.download_links.mkv.length > 0
                  button(onclick="switchFormat('mkv')" id="mkvTab" class="flex-1 px-6 py-4 text-sm font-medium text-center border-b-2 border-transparent hover:text-primary-600 dark:hover:text-primary-400 hover:border-primary-300 dark:hover:border-primary-600 transition-all duration-200")
                    span(class="flex items-center justify-center space-x-2")
                      svg(class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24")
                        path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2")
                      span MKV
              
              if episode.download_links.mp4 && episode.download_links.mp4.length > 0
                div(id="mp4Content" class="p-6")
                  each resolution in episode.download_links.mp4
                    div(class="mb-6 last:mb-0")
                      div(class="flex items-center justify-between mb-3")
                        span(class="text-sm font-semibold text-white bg-gradient-to-r from-blue-500 to-blue-600 px-3 py-1 rounded-full")= resolution.resolution
                        span(class="text-xs text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded-full transition-colors duration-300")= `${resolution.urls.length} providers`
                      div(class="grid grid-cols-2 sm:grid-cols-3 gap-3")
                        each provider in resolution.urls
                          a(href=provider.url target="_blank" rel="noopener noreferrer" class="flex items-center justify-center p-3 text-sm border-2 border-gray-200 dark:border-gray-600 rounded-xl hover:border-primary-300 dark:hover:border-primary-600 hover:bg-primary-50 dark:hover:bg-primary-900 transition-all duration-200 transform hover:scale-105")
                            svg(class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24")
                              path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3")
                            span(class="truncate font-medium text-gray-700 dark:text-gray-300")= provider.provider
              
              if episode.download_links.mkv && episode.download_links.mkv.length > 0
                div(id="mkvContent" class="p-6 hidden")
                  each resolution in episode.download_links.mkv
                    div(class="mb-6 last:mb-0")
                      div(class="flex items-center justify-between mb-3")
                        span(class="text-sm font-semibold text-white bg-gradient-to-r from-green-500 to-green-600 px-3 py-1 rounded-full")= resolution.resolution
                        span(class="text-xs text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded-full transition-colors duration-300")= `${resolution.urls.length} providers`
                      div(class="grid grid-cols-2 sm:grid-cols-3 gap-3")
                        each provider in resolution.urls
                          a(href=provider.url target="_blank" rel="noopener noreferrer" class="flex items-center justify-center p-3 text-sm border-2 border-gray-200 dark:border-gray-600 rounded-xl hover:border-primary-300 dark:hover:border-primary-600 hover:bg-primary-50 dark:hover:bg-primary-900 transition-all duration-200 transform hover:scale-105")
                            svg(class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24")
                              path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3")
                            span(class="truncate font-medium text-gray-700 dark:text-gray-300")= provider.provider

        if adSlots && adSlots.playerBottom && adSlots.playerBottom.length > 0
          div(class="mb-8")
            each ad in adSlots.playerBottom
              div(class="ad-slot bg-gray-100 dark:bg-gray-800 rounded-2xl shadow-lg transition-colors duration-300")!= ad.content

      div(class="lg:col-span-1")
        if adSlots && adSlots.sidebarTop && adSlots.sidebarTop.length > 0
          div(class="mb-8")
            each ad in adSlots.sidebarTop
              div(class="ad-slot bg-gray-100 dark:bg-gray-800 rounded-2xl shadow-lg transition-colors duration-300")!= ad.content

        div(class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 mb-8 border border-gray-100 dark:border-gray-700 transition-colors duration-300")
          a(href=`/anime/${anime.slug}` class="block group")
            div(class="relative overflow-hidden rounded-xl mb-4")
              img(src=anime.poster alt=anime.title class="w-full aspect-[3/4] object-cover transition-transform duration-300 group-hover:scale-105" onerror="this.onerror=null;this.src='https://placehold.co/400x600?text=No+Image';")
              div(class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300")
          h3(class="font-bold text-gray-900 dark:text-gray-100 mb-3 text-lg")
            a(href=`/anime/${anime.slug}` class="hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-200")= anime.title
          if anime.synopsis
            p(class="text-sm text-gray-600 dark:text-gray-400 line-clamp-3 mb-4")= anime.synopsis
          a(href=`/anime/${anime.slug}` class="inline-flex items-center text-primary-600 dark:text-primary-400 text-sm hover:text-primary-700 dark:hover:text-primary-300 font-medium transition-colors duration-200")
            span Lihat Detail Anime
            svg(class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24")
              path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7")

        div(class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 mb-8 border border-gray-100 dark:border-gray-700 transition-colors duration-300")
          h3(class="font-bold text-gray-900 dark:text-gray-100 mb-4 flex items-center")
            svg(class="w-5 h-5 mr-2 text-primary-600 dark:text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24")
              path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z")
            span Bagikan Episode
          div(class="space-y-3")
            button(onclick=`shareEpisode('facebook')` class="w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white py-3 px-4 rounded-xl text-sm font-medium transition-all duration-200 transform hover:scale-105 shadow-lg")
              span Facebook
            button(onclick=`shareEpisode('twitter')` class="w-full bg-gradient-to-r from-sky-500 to-sky-600 hover:from-sky-600 hover:to-sky-700 text-white py-3 px-4 rounded-xl text-sm font-medium transition-all duration-200 transform hover:scale-105 shadow-lg")
              span Twitter
            button(onclick="copyEpisodeLink()" class="w-full bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white py-3 px-4 rounded-xl text-sm font-medium transition-all duration-200 transform hover:scale-105 shadow-lg")
              span Copy Link

        if adSlots && adSlots.sidebarBottom && adSlots.sidebarBottom.length > 0
          div(class="mb-8")
            each ad in adSlots.sidebarBottom
              div(class="ad-slot bg-gray-100 dark:bg-gray-800 rounded-2xl shadow-lg transition-colors duration-300")!= ad.content

block scripts
  script.
    const autonexteps = document.getElementById('autonexteps')
    autonexteps.checked = localStorage.getItem('AutoPlayNextEpisode') === 'true';
    autonexteps.addEventListener('change', (e) => {
      localStorage.setItem('AutoPlayNextEpisode', e.target.checked);
    });
    const source = !{JSON.stringify(episode.quality)}
    const player = new Plyr('#player', {
      autoplay: false,
      muted: true,
      controls: ['play-large', 'play', 'progress', 'current-time', 'duration', 'mute', 'volume', 'settings', 'fullscreen'],
      settings: ['quality', 'speed'],
      quality: {
        default: 360,
        options: !{JSON.stringify(episode.qlist)},
        forced: true,
      },
      speed: {
        selected: 1,
        options: [0.5, 0.75, 1, 1.25, 1.5, 2]
      },
      keyboard: {
        focused: true,
        global: true
      },
      tooltips: {
        controls: true,
        seek: true
      },
      captions: {
        active: false,
        language: 'auto',
        update: false
      },
      fullscreen: {
        enabled: true,
        fallback: true,
        iosNative: false
      },
      storage: {
        enabled: true,
        key: 'plyr'
      },
      seekTime: 10,
      volume: 0.8,
      clickToPlay: true,
      disableContextMenu: false
    });
    const video = player.media;
    const playerContainer = document.querySelector('#player');
    const loadingOverlay = document.getElementById('playerLoading');
    
    const anime = !{JSON.stringify(anime)};
    const episode = !{JSON.stringify(episode)};
    const episodeNumber = #{episode.number};
    const animeSlug = '#{anime.slug}';
    const nextEpisodeNumber = #{navigation.next || 'null'};
    
    let canSeek = false;
    let pendingSeekTime = null;
    
    player.on('loadstart', event => {
      console.log('Video loading started');
      loadingOverlay.style.opacity = '1';
      loadingOverlay.style.pointerEvents = 'auto';
    });

    player.on('loadedmetadata', event => {
      console.log('Metadata loaded - seeking now available');
      canSeek = true;
      
      if (pendingSeekTime !== null) {
        player.currentTime = pendingSeekTime;
        pendingSeekTime = null;
      }
      
      const savedProgress = localStorage.getItem(`episode_progress_${animeSlug}_${episodeNumber}`);
      if (savedProgress) {
        try {
          const progressData = JSON.parse(savedProgress);
          const daysSinceWatch = (Date.now() - progressData.timestamp) / (1000 * 60 * 60 * 24);
          if (daysSinceWatch < 7 && progressData.progress > 5 && progressData.progress < 95) {
            const minutes = Math.floor(progressData.currentTime / 60);
            const seconds = Math.floor(progressData.currentTime % 60).toString().padStart(2, '0');
            console.log(`Resuming from ${minutes}:${seconds}`);
            
            if (canSeek) {
              player.currentTime = progressData.currentTime;
            } else {
              pendingSeekTime = progressData.currentTime;
            }
          }
        } catch (e) {
          console.error('Error loading saved progress:', e);
        }
      }
    });

    player.on('qualitychange', event => {
      const newQuality = event.detail.quality;
      console.log('User pilih kualitas:', newQuality);

      const currentTime = player.currentTime;
      const isPlaying = !player.paused;

      player.source = {
          type: 'video',
          sources: [{ src: source[newQuality], type: 'video/mp4', size: newQuality }]
      };
    });

    player.on('canplay', event => {
      console.log('Video can start playing');
      loadingOverlay.style.opacity = '0';
      setTimeout(() => {
        loadingOverlay.style.pointerEvents = 'none';
      }, 300);
    });

    player.on('ready', event => {
      player.volume = 0.8;
      player.elements.container.focus();
      console.log('Plyr is ready');
    });

    player.on('timeupdate', event => {
      const currentTime = player.currentTime;
      const duration = player.duration;
      if (duration > 0 && currentTime > 0) {
        const progress = (currentTime / duration) * 100;
        if (progress > 1 && progress < 99) {
          localStorage.setItem(`episode_progress_${animeSlug}_${episodeNumber}`, JSON.stringify({
            currentTime: currentTime,
            progress: progress,
            timestamp: Date.now(),
            animeSlug: animeSlug,
            episodeNumber: episodeNumber
          }));
        }
      }
    });

    player.on('seeking', event => {
      console.log('User is seeking to:', player.currentTime);
    });

    player.on('seeked', event => {
      console.log('Seek completed at:', player.currentTime);
    });

    function seekTo(time) {
      if (canSeek) {
        player.currentTime = time;
      } else {
        pendingSeekTime = time;
        console.log('Seek queued for when metadata loads:', time);
      }
    }

    player.on('ended', event => {
      console.log('Video ended');
      
      localStorage.removeItem(`episode_progress_${animeSlug}_${episodeNumber}`);
      
      if (nextEpisodeNumber && nextEpisodeNumber !== 'null') {
        const nextEpisodeUrl = `/anime/${animeSlug}/episode/${nextEpisodeNumber}`;
        if (localStorage.getItem('AutoPlayNextEpisode') === 'true') {
          document.body.style.opacity = '0.8';
          setTimeout(() => {
            window.location.href = nextEpisodeUrl;
          }, 500);
        }
      }
    });

    player.on('error', event => {
      console.error('Plyr error:', event.detail);
      showVideoError();
    });

    function showVideoError() {
      loadingOverlay.innerHTML = `
        <div class="text-center text-white">
          <div class="bg-red-500/20 rounded-full p-4 w-20 h-20 mx-auto mb-4 flex items-center justify-center">
            <svg class="w-10 h-10 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
          </div>
          <p class="text-gray-300 mb-4 max-w-md mx-auto">Terjadi kesalahan saat memuat video. Silakan coba lagi.</p>
          <button onclick="location.reload()" class="bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-xl font-medium transition-colors duration-200">
            Muat Ulang
          </button>
        </div>
      `;
      loadingOverlay.style.opacity = '1';
      loadingOverlay.style.pointerEvents = 'auto';
    }

    function toggleDownloads() {
      const content = document.getElementById('downloadContent');
      const chevron = document.getElementById('downloadChevron');
      
      if (content.classList.contains('hidden')) {
        content.classList.remove('hidden');
        chevron.style.transform = 'rotate(180deg)';
        
        const mp4Tab = document.getElementById('mp4Tab');
        const mkvTab = document.getElementById('mkvTab');
        if (mp4Tab) {
          switchFormat('mp4');
        } else if (mkvTab) {
          switchFormat('mkv');
        }
      } else {
        content.classList.add('hidden');
        chevron.style.transform = 'rotate(0deg)';
      }
    }

    function switchFormat(format) {
      const mp4Tab = document.getElementById('mp4Tab');
      const mkvTab = document.getElementById('mkvTab');
      const mp4Content = document.getElementById('mp4Content');
      const mkvContent = document.getElementById('mkvContent');
      
      [mp4Tab, mkvTab].forEach(tab => {
        if (tab) {
          tab.classList.remove('text-primary-600', 'border-primary-600', 'dark:text-primary-400', 'dark:border-primary-500');
          tab.classList.add('text-gray-500', 'border-transparent', 'dark:text-gray-400');
        }
      });
      
      [mp4Content, mkvContent].forEach(content => {
        if (content) content.classList.add('hidden');
      });
      
      if (format === 'mp4' && mp4Tab && mp4Content) {
        mp4Tab.classList.remove('text-gray-500', 'border-transparent', 'dark:text-gray-400');
        mp4Tab.classList.add('text-primary-600', 'border-primary-600', 'dark:text-primary-400', 'dark:border-primary-500');
        mp4Content.classList.remove('hidden');
      } else if (format === 'mkv' && mkvTab && mkvContent) {
        mkvTab.classList.remove('text-gray-500', 'border-transparent', 'dark:text-gray-400');
        mkvTab.classList.add('text-primary-600', 'border-primary-600', 'dark:text-primary-400', 'dark:border-primary-500');
        mkvContent.classList.remove('hidden');
      }
    }

    function shareEpisode(platform) {
      const url = encodeURIComponent(window.location.href);
      const text = encodeURIComponent(`Nonton ${anime.title} Episode ${episode.number} di KitaNime`);
      
      const shareUrls = {
        facebook: `https://www.facebook.com/sharer/sharer.php?u=${url}`,
        twitter: `https://twitter.com/intent/tweet?url=${url}&text=${text}`,
        whatsapp: `https://wa.me/?text=${text} ${url}`,
        telegram: `https://t.me/share/url?url=${url}&text=${text}`
      };
      
      if (shareUrls[platform]) {
        window.open(shareUrls[platform], '_blank', 'width=600,height=400');
      }
    }

    function copyEpisodeLink() {
      if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(window.location.href).then(() => {
          showNotification('Link episode berhasil disalin!', 'success');
        }).catch(() => {
          fallbackCopyTextToClipboard(window.location.href);
        });
      } else {
        fallbackCopyTextToClipboard(window.location.href);
      }
    }

    function fallbackCopyTextToClipboard(text) {
      const textArea = document.createElement('textarea');
      textArea.value = text;
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      
      try {
        document.execCommand('copy');
        showNotification('Link episode berhasil disalin!', 'success');
      } catch (err) {
        showNotification('Gagal menyalin link', 'error');
      }
      
      document.body.removeChild(textArea);
    }

    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      let bgColor = 'bg-blue-500';
      if (type === 'success') bgColor = 'bg-green-500';
      if (type === 'error') bgColor = 'bg-red-500';
      
      notification.className = `fixed top-4 right-4 z-50 p-4 rounded-xl shadow-lg transform translate-x-full transition-transform duration-300 ${bgColor} text-white`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.style.transform = 'translateX(0)';
      }, 100);
      
      setTimeout(() => {
        notification.style.transform = 'translateX(full)';
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 300);
      }, 3000);
    }

    document.addEventListener('keydown', (e) => {
      if (e.target.tagName.toLowerCase() === 'input') return;
      
      switch(e.key) {
        case ' ':
          e.preventDefault();
          player.togglePlay();
          break;
        case 'ArrowLeft':
          e.preventDefault();
          seekTo(Math.max(0, player.currentTime - 10));
          break;
        case 'ArrowRight':
          e.preventDefault();
          seekTo(Math.min(player.duration || 0, player.currentTime + 10));
          break;
        case 'ArrowUp':
          e.preventDefault();
          player.volume = Math.min(1, player.volume + 0.1);
          break;
        case 'ArrowDown':
          e.preventDefault();
          player.volume = Math.max(0, player.volume - 0.1);
          break;
        case 'm':
        case 'M':
          e.preventDefault();
          player.muted = !player.muted;
          break;
        case 'f':
        case 'F':
          e.preventDefault();
          player.fullscreen.toggle();
          break;
      }
    });

    let touchStartX = 0;
    let touchStartY = 0;

    playerContainer.addEventListener('touchstart', (e) => {
      touchStartX = e.touches[0].clientX;
      touchStartY = e.touches[0].clientY;
    });

    playerContainer.addEventListener('touchmove', (e) => {
      if (!player.duration) return;
      
      const touchX = e.touches[0].clientX;
      const touchY = e.touches[0].clientY;
      const deltaX = touchX - touchStartX;
      const deltaY = touchY - touchStartY;
      
      if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
        e.preventDefault();
        const seekAmount = (deltaX / window.innerWidth) * 30;
        const newTime = Math.max(0, Math.min(player.duration, player.currentTime + seekAmount));
        seekTo(newTime);
      }
    });

    const observer = new IntersectionObserver(entries => {
      if (entries[0].isIntersecting && player.paused) {
        if (!player.hasUserInteracted) {
          player.play().catch(console.log);
        }
      }
    }, { threshold: 0.6 });
    
    observer.observe(playerContainer);

    player.hasUserInteracted = false;
    ['click', 'keydown', 'touchstart'].forEach(event => {
      playerContainer.addEventListener(event, () => {
        player.hasUserInteracted = true;
      }, { once: true });
    });

    document.getElementById('qualityBtn')?.addEventListener('click', () => {
      player.elements.settings.click();
    });

    document.getElementById('speedBtn')?.addEventListener('click', () => {
      const speeds = [0.5, 0.75, 1, 1.25, 1.5, 2];
      const currentIndex = speeds.indexOf(player.speed);
      const nextIndex = (currentIndex + 1) % speeds.length;
      player.speed = speeds[nextIndex];
      document.getElementById('speedBtn').textContent = `${speeds[nextIndex]}x`;
    });

    if (typeof performance !== 'undefined' && performance.mark) {
      performance.mark('player-init-start');
      
      player.on('ready', () => {
        performance.mark('player-ready');
        performance.measure('player-init-time', 'player-init-start', 'player-ready');
      });
    }

    let errorCount = 0;
    const maxRetries = 3;

    player.on('error', () => {
      errorCount++;
      if (errorCount < maxRetries) {
        console.log(`Attempting recovery ${errorCount}/${maxRetries}`);
        setTimeout(() => {
          player.restart();
        }, 2000);
      }
    });

    window.addEventListener('beforeunload', () => {
      if (player) {
        player.destroy();
      }
      observer.disconnect();
    });
